diff --git a/README.md b/README.md
index 1111111..2222222 100644
--- a/README.md
+++ b/README.md
@@
 ## Educa√ß√£o Digital e Ferramentas
 
 Este reposit√≥rio re√∫ne exemplos, scripts e recursos √∫teis para a transforma√ß√£o digital em contexto escolar.
+
+## üñ•Ô∏è Script para cria√ß√£o de utilizadores locais no Windows
+
+No diret√≥rio [`scripts/`](scripts/) est√° dispon√≠vel o ficheiro **`CreateLocalUsers.ps1`**, que permite criar utilizadores locais em m√°quinas Windows (vers√µes Home ou sem AD), a partir de um ficheiro de pares `user:pass`.
+
+### Como usar
+
+1. Crie um ficheiro `userlist.txt` com o seguinte formato:
+   ```
+   maria:Pass123!
+   joao:Senha456!
+   ana:MySecret789
+   ```
+
+2. Abra o **PowerShell como Administrador**.
+
+3. Execute o script:
+   ```powershell
+   Set-ExecutionPolicy RemoteSigned -Scope Process -Force
+   .\scripts\CreateLocalUsers.ps1
+   ```
+
+4. O script ir√°:
+   - Perguntar o caminho para o ficheiro `userlist.txt`.
+   - Criar todos os utilizadores com permiss√µes **standard** (grupo `Users`).
+   - Perguntar se algum utilizador da lista deve ser promovido a **Administrador**.
+   - Apresentar um resumo final com o resultado.
+
+### Exemplo de output
+
+```
+############################################################
+#     SCRIPT DE CRIA√á√ÉO DE UTILIZADORES LOCAIS (WIN)       #
+############################################################
+
+‚úî Ficheiro encontrado: C:\Users\Public\userlist.txt
+
+[1/3] A processar linha: maria:Pass123!
+‚úî Utilizador 'maria' criado com sucesso (grupo: Users).
+
+=== Atribuir permiss√µes de Administrador ===
+‚úî 'joao' promovido a Administrador.
+
+############################################################
+#                   RESUMO DA EXECU√á√ÉO                     #
+############################################################
+Utilizadores criados : 3
+Ignorados            : 0
+Erros na cria√ß√£o     : 0
+Promovidos a admin   : 1
+```
diff --git a/scripts/CreateLocalUsers.ps1 b/scripts/CreateLocalUsers.ps1
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/scripts/CreateLocalUsers.ps1
@@
+# CreateLocalUsers.ps1
+# Script interativo para criar utilizadores locais a partir de user:pass
+# Inclui banners azuis, resumo final e op√ß√£o de promover alguns utilizadores a administradores
+
+function Show-Banner($text) {
+    Write-Host ""
+    Write-Host "############################################################" -ForegroundColor White -BackgroundColor DarkBlue
+    Write-Host "#                                                          #" -ForegroundColor White -BackgroundColor DarkBlue
+    $padding = (60 - $text.Length) / 2
+    $line = (" " * [Math]::Floor($padding)) + $text + (" " * [Math]::Ceiling($padding))
+    Write-Host "#$line#" -ForegroundColor White -BackgroundColor DarkBlue
+    Write-Host "#                                                          #" -ForegroundColor White -BackgroundColor DarkBlue
+    Write-Host "############################################################" -ForegroundColor White -BackgroundColor DarkBlue
+    Write-Host ""
+}
+
+# Banner inicial
+Clear-Host
+Show-Banner "SCRIPT DE CRIA√á√ÉO DE UTILIZADORES LOCAIS"
+
+# Perguntar pelo ficheiro
+$UserListFile = Read-Host "Indique o caminho completo do ficheiro (ex: C:\Users\Public\userlist.txt)"
+
+if (-Not (Test-Path $UserListFile)) {
+    Write-Host "‚ùå Ficheiro n√£o encontrado: $UserListFile" -ForegroundColor Red
+    exit
+}
+
+Write-Host "‚úî Ficheiro encontrado: $UserListFile" -ForegroundColor Green
+Write-Host ""
+
+# Perguntar pelos utilizadores que devem ser admins
+$adminInput = Read-Host "Indique os utilizadores (separados por v√≠rgulas) que devem ser administradores (ou deixe vazio para nenhum)"
+$adminList = @()
+if (-not [string]::IsNullOrWhiteSpace($adminInput)) {
+    $adminList = $adminInput.Split(",") | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
+}
+
+Write-Host "----------------------------------------------"
+
+# Contadores
+$created = 0
+$skipped = 0
+$errors = 0
+$promoted = 0
+$adminErrors = @()
+
+# Ler e processar cada linha
+$lines = Get-Content $UserListFile
+$total = $lines.Count
+$index = 1
+
+foreach ($line in $lines) {
+    Write-Host "[$index/$total] A processar linha: $line" -ForegroundColor Yellow
+
+    try {
+        $parts = $line.Split(":")
+        $username = $parts[0].Trim()
+        $password = $parts[1].Trim()
+
+        if ([string]::IsNullOrWhiteSpace($username) -or [string]::IsNullOrWhiteSpace($password)) {
+            Write-Host "‚ö† Linha inv√°lida: '$line' - ignorada." -ForegroundColor DarkYellow
+            $skipped++
+        }
+        elseif (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
+            Write-Host "‚Ñπ Utilizador '$username' j√° existe - ignorado." -ForegroundColor Gray
+            $skipped++
+        }
+        else {
+            $securePass = ConvertTo-SecureString $password -AsPlainText -Force
+            New-LocalUser -Name $username -Password $securePass -FullName $username -Description "Conta criada por script"
+            Add-LocalGroupMember -Group "Users" -Member $username
+            Write-Host "‚úî Utilizador '$username' criado com sucesso (grupo: Users)." -ForegroundColor Green
+            $created++
+        }
+    }
+    catch {
+        Write-Host "‚ùå Erro ao criar '$username' -> $($_.Exception.Message)" -ForegroundColor Red
+        $errors++
+    }
+
+    $index++
+}
+
+# Promover admins
+if ($adminList.Count -gt 0) {
+    Write-Host ""
+    Write-Host "=== Atribuir permiss√µes de Administrador ===" -ForegroundColor Cyan
+    foreach ($adminUser in $adminList) {
+        if (Get-LocalUser -Name $adminUser -ErrorAction SilentlyContinue) {
+            try {
+                Add-LocalGroupMember -Group "Administrators" -Member $adminUser -ErrorAction Stop
+                Write-Host "‚úî '$adminUser' promovido a Administrador." -ForegroundColor Green
+                $promoted++
+            }
+            catch {
+                Write-Host "‚ùå Erro ao promover '$adminUser' -> $($_.Exception.Message)" -ForegroundColor Red
+                $adminErrors += $adminUser
+            }
+        }
+        else {
+            Write-Host "‚ùå Utilizador '$adminUser' n√£o encontrado - n√£o foi promovido." -ForegroundColor Red
+            $adminErrors += $adminUser
+        }
+    }
+}
+
+# Banner final com resumo
+Show-Banner "RESUMO DA EXECU√á√ÉO"
+
+Write-Host "Utilizadores criados : $created" -ForegroundColor Green
+Write-Host "Ignorados            : $skipped" -ForegroundColor Yellow
+Write-Host "Erros na cria√ß√£o     : $errors" -ForegroundColor Red
+Write-Host "Promovidos a admin   : $promoted" -ForegroundColor Cyan
+
+if ($adminErrors.Count -gt 0) {
+    Write-Host "N√£o foi poss√≠vel promover os seguintes a admin:" -ForegroundColor Red
+    $adminErrors | ForEach-Object { Write-Host " - $_" -ForegroundColor Red }
+}
+
+Write-Host "----------------------------------------------"
+Write-Host "Fim do script." -ForegroundColor Cyan
+Write-Host ""
